import org.apache.commons.io.FileUtils

plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
}

loom {
    accessWidenerPath = new File("src/main/resources/" + project.artifact_id + ".accesswidener")
}

version = project.mod_version
group = project.group_id

base {
    archivesName = project.artifact_id
}

repositories {
    maven { url "https://api.modrinth.com/maven" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

/**
 * Adds a mod from Modrinth to your mod.
 * @param name the "slug" of the mod, usually the name shown in the url of the mod-page.
 * @param version the version of the release
 * @param mod - Is this a mod or a library? Important to ensure loom remaps it properly in case.
 * @param state What to do with the mod.<br>
 * 0 = only add to IDE<br>
 * 1 = add to IDE and depend on in final jar<br>
 * 2 = Add to your final-jar - Mostly used for libraries. Use with caution!
 * @return
 */
def addMod(String name, String version, boolean mod, int state) {
    dependencies {
        if (state == 0) {
            compileOnly(mod ? modImplementation("maven.modrinth:" + name + ":" + version) : implementation("maven.modrinth:" + name + ":" + version))
            return;
        }
        if (state == 1) {
            mod ? modImplementation("maven.modrinth:" + name + ":" + version) : implementation("maven.modrinth:" + name + ":" + version)
            return;
        }
        if (state == 2) {
            include(mod ? modImplementation("maven.modrinth:" + name + ":" + version) : implementation("maven.modrinth:" + name + ":" + version))
        }
    }
}

class FinalSetupTask extends DefaultTask {


    @Input
    String groupId
    @Input
    String modId
    @Input
    String modName
    @Input
    String modDescription
    @Input
    String modAuthor
    @Input
    String modVersion

    @TaskAction
    def run() {
        replaceConfigs(new File("gradle.properties"))
        replaceConfigs(new File("src/main/resources/fabric.mod.json"))
        replaceConfigs(new File("src/main/resources/modid.mixins.json"))
        FileUtils.moveFile(new File("src/main/resources/modid.accesswidener"), new File("src/main/resources/" + modId + ".accesswidener"))
        FileUtils.moveFile(new File("src/main/resources/modid.mixins.json"), new File("src/main/resources/" + modId + ".mixins.json"))
        project.mkdir "src/main/java/" + groupId.replace(".", "/") + "/" + modId + "/mixin"
        project.mkdir("src/main/resources/assets/" + modId)
        FileUtils.moveFile(new File("src/main/resources/icon.png"),  new File("src/main/resources/assets/" + modId + "/icon.png"))
    }

    private void replaceConfigs(File file) {
        def reader = new BufferedReader(new FileReader(file))
        List<String> lines = reader.readLines()
        List<String> list = new ArrayList<>()
        def writer = new BufferedWriter(new FileWriter(file))
        switch (file.getName()) {
            case "gradle.properties": {
                lines.forEach { String s ->
                    list.add(s.replace("group_id=com.example", "group_id=" + groupId)
                            .replace("artifact_id=modid", "artifact_id=" + modId)
                            .replace("mod_version=modVersion", "mod_version=" + modVersion)
                    )
                }
                break
            }
            case "fabric.mod.json": {
                for (def s in lines) {
                    list.add(s.replace("<mod_id>", modId)
                            .replace("<mod_name>", modName)
                            .replace("<mod_description>", modDescription)
                            .replace("<author>", modAuthor)
                    )
                }
                break
            }
            case "modid.mixins.json": {
                for (def s in lines) {
                    list.add(s.replace("<group_id>.<mod_id>", groupId + "." + modId))
                }
                break
            }
        }
        for (final def s in list) {
            writer.writeLine(s)
        }
        writer.close()
    }
}

tasks.register("finalSetup", FinalSetupTask) {
    groupId = "com.example" // Group-ID. If using a domain, make 100% sure you own it. If you don't own one, use either "me.yourusername" or "io.github.yourgithubusername" if you have a github user
    modId = "modid"  // Mod-ID. Please only use lowercase a-z characters
    modName = "Example Mod" // Mod-Name - Will be used in mods like ModMenu to show your mod name.
    modDescription = "Some Mod man, idk either lol. It's me, UwU OwO" // Description. Same as above, but for a Description
    modAuthor = "Your beautiful name <3" // Author of the Mod.
    modVersion = "1.0+build.1" // Mod-Version. You can use multiple schemes, i like to use schemes like "1.20.2.build.*" for my mods, some also prefer schemes like "1.0.1" or "1.0+build.1". If you don't know, simply use a semantic scheme, aka "major.minor.patch", ie. "1.0.0"
}
